



import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Scanner;
import java.io.File;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author pc
 */
public class Client extends javax.swing.JFrame {

    /**
     * Creates new form Client
     */
    public Client() {
        initComponents();
    }
static public String temp1,passname;
public static int temp2=0;
public static Thread t;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor. 
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        area = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        hostname = new javax.swing.JTextField();
        chatboxpopup = new javax.swing.JPopupMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem23 = new javax.swing.JMenuItem();
        jMenuItem22 = new javax.swing.JMenuItem();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem28 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem32 = new javax.swing.JMenuItem();
        jMenuItem31 = new javax.swing.JMenuItem();
        jMenuItem30 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenuItem29 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem25 = new javax.swing.JMenuItem();
        jMenuItem24 = new javax.swing.JMenuItem();
        jMenuItem27 = new javax.swing.JMenuItem();
        jMenuItem26 = new javax.swing.JMenuItem();
        smileyPopup = new javax.swing.JPopupMenu();
        Smile = new javax.swing.JMenuItem();
        Skull = new javax.swing.JMenuItem();
        Victory = new javax.swing.JMenuItem();
        Heart = new javax.swing.JMenuItem();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jButton1 = new javax.swing.JButton();
        autoRefresh = new javax.swing.JButton();
        autoR = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        quotetxt = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        chatmsg = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        portname = new javax.swing.JTextField();
        usid = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        onlineList = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        Smile1 = new javax.swing.JMenuItem();
        Heart1 = new javax.swing.JMenuItem();
        Victory1 = new javax.swing.JMenuItem();
        Skull1 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();

        area.setText("jTextField1");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(area, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(331, Short.MAX_VALUE))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(area, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(269, Short.MAX_VALUE))
        );

        jButton2.setText("Refresh");
        jButton2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jButton2MouseMoved(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        hostname.setEditable(false);
        hostname.setText("localhost");
        hostname.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jLabel2MouseMoved(evt);
            }
        });

        jMenu5.setText("Text Color");

        jMenuItem23.setText("Black");
        jMenuItem23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem23ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem23);

        jMenuItem22.setText("Blue");
        jMenuItem22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem22ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem22);

        jMenuItem21.setText("Red");
        jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem21ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem21);

        jMenuItem19.setText("Green");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem19ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem19);

        jMenuItem28.setText("White");
        jMenuItem28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem28ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem28);

        chatboxpopup.add(jMenu5);

        jMenu4.setText("Background Color");

        jMenuItem32.setText("Black");
        jMenuItem32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem32ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem32);

        jMenuItem31.setText("Blue");
        jMenuItem31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem31ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem31);

        jMenuItem30.setText("Red");
        jMenuItem30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem30ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem30);

        jMenuItem20.setText("Green");
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem20ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem20);

        jMenuItem29.setText("White");
        jMenuItem29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem29ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem29);

        chatboxpopup.add(jMenu4);

        jMenu6.setText("Themes");

        jMenuItem25.setText("Default");
        jMenuItem25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem25ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem25);

        jMenuItem24.setText("Matrix");
        jMenuItem24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem24ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem24);

        jMenuItem27.setText("Inverse");
        jMenuItem27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem27ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem27);

        jMenuItem26.setText("Ubuntu");
        jMenuItem26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem26ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem26);

        chatboxpopup.add(jMenu6);

        Smile.setText("Smiley Face (☺)");
        Smile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SmileActionPerformed(evt);
            }
        });
        smileyPopup.add(Smile);

        Skull.setText("Skull (☠)");
        Skull.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SkullActionPerformed(evt);
            }
        });
        smileyPopup.add(Skull);

        Victory.setText("Victory Sign (✌)");
        Victory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VictoryActionPerformed(evt);
            }
        });
        smileyPopup.add(Victory);

        Heart.setText("Heart (♡)");
        Heart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HeartActionPerformed(evt);
            }
        });
        smileyPopup.add(Heart);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jButton1.setBackground(null);
        jButton1.setText("Send Message");
        jButton1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Send_but.jpg"))); // NOI18N
        jButton1.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                jButton1MouseWheelMoved(evt);
            }
        });
        jButton1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jButton1MouseMoved(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        autoRefresh.setText("jButton3");
        autoRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoRefreshActionPerformed(evt);
            }
        });

        autoR.setText("Auto Refresh (User Sensitive)                                            Press Enter to send messages.");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("DexChat");
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(255, 255, 255));
        setName("frame12"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jButton1MouseMoved(evt);
            }
        });

        quotetxt.setEditable(false);
        quotetxt.setColumns(20);
        quotetxt.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        quotetxt.setLineWrap(true);
        quotetxt.setRows(5);
        quotetxt.setWrapStyleWord(true);
        quotetxt.setComponentPopupMenu(chatboxpopup);
        quotetxt.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                quotetxtMouseMoved(evt);
            }
        });
        jScrollPane1.setViewportView(quotetxt);

        jLabel1.setText("Connected to");
        jLabel1.setFocusable(false);
        jLabel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jLabel2MouseMoved(evt);
            }
        });

        chatmsg.setComponentPopupMenu(smileyPopup);
        chatmsg.setInheritsPopupMenu(true);
        chatmsg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chatmsgActionPerformed(evt);
            }
        });

        jLabel2.setText("Your name");
        jLabel2.setFocusable(false);
        jLabel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jLabel2MouseMoved1(evt);
            }
        });

        username.setEditable(false);
        username.setText("Default Name");
        username.setFocusable(false);
        username.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jLabel2MouseMoved(evt);
            }
        });

        jLabel3.setText("Port Number");
        jLabel3.setFocusable(false);
        jLabel3.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jLabel2MouseMoved(evt);
            }
        });

        portname.setEditable(false);
        portname.setText("1234");
        portname.setFocusable(false);
        portname.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jLabel2MouseMoved(evt);
            }
        });

        usid.setEditable(false);

        jButton4.setText("Help");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel4.setText("Press Enter to Send Messages");

        jMenu1.setMnemonic('F');
        jMenu1.setText("File");

        jMenuItem10.setMnemonic('D');
        jMenuItem10.setText("Close This Chatbox");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem10);

        jMenuItem11.setMnemonic('E');
        jMenuItem11.setText("Exit Dexchat");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem11);

        jMenuBar1.add(jMenu1);

        jMenu2.setMnemonic('C');
        jMenu2.setText("Commands");

        jMenuItem1.setMnemonic('O');
        jMenuItem1.setText("Number of Online Users");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        onlineList.setText("List of Online Users");
        onlineList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onlineListActionPerformed(evt);
            }
        });
        jMenu2.add(onlineList);

        jMenuItem2.setText("No of Messages");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Messages in this Conversation");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Current Server Time");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Server Uptime");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setMnemonic('w');
        jMenuItem6.setText("Hide Old Messages");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setText("Restore Old Messages");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);
        jMenu2.add(jSeparator1);

        Smile1.setText("Smiley Face (☺)");
        Smile1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Smile1ActionPerformed(evt);
            }
        });
        jMenu2.add(Smile1);

        Heart1.setText("Heart (♡)");
        Heart1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Heart1ActionPerformed(evt);
            }
        });
        jMenu2.add(Heart1);

        Victory1.setText("Victory Sign (✌)");
        Victory1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Victory1ActionPerformed(evt);
            }
        });
        jMenu2.add(Victory1);

        Skull1.setText("Skull (☠)");
        Skull1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Skull1ActionPerformed(evt);
            }
        });
        jMenu2.add(Skull1);
        jMenu2.add(jSeparator2);

        jMenuItem8.setText("Commands Help");
        jMenu2.add(jMenuItem8);

        jMenuBar1.add(jMenu2);

        jMenu3.setMnemonic('A');
        jMenu3.setText("About");

        jMenuItem12.setText("About Dexchat");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem12);

        jMenuItem13.setText("Credits");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem13);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(chatmsg)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(username, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usid, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(portname, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(portname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chatmsg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int port = Integer.parseInt(portname.getText());
temp1=hostname.getText();

        
Socket s = DexCCL.getSocket(port); 
try
{

Scanner in =new Scanner(s.getInputStream());
PrintWriter out = new PrintWriter(s.getOutputStream(),true); 




out.println(username.getText());
out.println(passname);
String app=in.nextLine();
String quote="";
if(app.equalsIgnoreCase("APPROVE"))
    {
        out.println(chatmsg.getText()); 
        chatmsg.setText("");
        if(!(chatmsg.getText().equalsIgnoreCase("CMD_ADMIN_EXIT")))
        {
            
        

//String quote="";
        while(true)
        {
    
            String input=in.nextLine();
            if(input.equalsIgnoreCase("END"))
                break;
            else
                quote = quote+"\n"+input;
        }}
    }
else if (app.equalsIgnoreCase("DISAPPROVE"))
{
    
}
// disconnect from the server
out.println("CMD_EXIT"); 
//System.out.println(in.nextLine());

s.close(); 

// write the quote on the chalkboard

quotetxt.setText("");

         quotetxt.append(quote+"\n");



}
catch (Exception e)
{
e.printStackTrace(); 
}

       // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int port = Integer.parseInt(portname.getText());
temp1=hostname.getText();

        System.out.println("Output by DexClient 1.5\n");
Socket s = DexCCL.getSocket(port); 
try
{
System.out.println("Connected on port " + port);
Scanner in =new Scanner(s.getInputStream());
PrintWriter out = new PrintWriter(s.getOutputStream(),true); 




out.println(username.getText());
out.println(passname);
String app=in.nextLine();
String quote="";
if(app.equalsIgnoreCase("APPROVE"))
        {
            
        
    out.println("REFRESH"); 

while(true)
{
    
    String input=in.nextLine();
    if(input.equalsIgnoreCase("END"))
        break;
    else
        quote = quote+"\n"+input;
} }
// disconnect from the server
out.println("CMD_EXIT"); 
//System.out.println(in.nextLine());

s.close(); 

// write the quote on the chalkboard

quotetxt.setText("");

         quotetxt.append(quote+"\n");



}
catch (Exception e)
{
}
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       t=new Refresh();
       t.start();
        this.setTitle("Dexchat 2.0(Alpha)- "+Launcher.username.getText());
        Image icon=Image1.iconToImage(Launcher.PICLABEL.getIcon());
        //Image icon = Toolkit.getDefaultToolkit().createImage("C:\\Screenshots\\AirPort.png");        
       this.setIconImage(icon);
        chatmsg.requestFocusInWindow();
        //Image icon = Toolkit.getDefaultToolkit().createImage("C:\\Screenshots\\AirPort.png");        
       this.setIconImage(icon); 
        username.setText(Launcher.username.getText());
        String passq=Launcher.hostname.getText();
        {
  passq=passq.replace('A', '0');
  passq=passq.replace('S', '1');
  passq=passq.replace('D', '2');
  passq=passq.replace('F', '3');
  passq=passq.replace('G', '4');
  passq=passq.replace('H', '5');
  passq=passq.replace('J', '6');
  passq=passq.replace('K', '7');
  passq=passq.replace('L', '8');
  passq=passq.replace('Z', '9');
  passq=passq.replace("X", ".");
    }
  usid.setText(Launcher.hostname.getText());
  hostname.setText(passq);
        portname.setText(Launcher.portname.getText());
        passname=Launcher.passname.getText();
        int port = Integer.parseInt(portname.getText());
temp1=hostname.getText();

        System.out.println("Welcome to the DexChat Client\n");
Socket s = DexCCL.getSocket(port); 
try
{
System.out.println("Connected on port " + port);
Scanner in =new Scanner(s.getInputStream());
PrintWriter out = new PrintWriter(s.getOutputStream(),true); 




out.println(username.getText());
out.println(passname);
String app=in.nextLine();
String quote="";
if(app.equalsIgnoreCase("APPROVE"))
        {
            
        
    out.println("CMD_CONNECT"); 

while(true)
{
    
    String input=in.nextLine();
    if(input.equalsIgnoreCase("END"))
        break;
    else
        quote = quote+"\n"+input;
} }
else if(app.equalsIgnoreCase("DISAPPROVE"))
{
    quotetxt.setText("Connection Failed! The possible reasons are:\n\t1. You entered a wrong password.\n\t2. The server version is not upto date.\nTry closing the chatbox and re-entering the details.\n Exiting in(seconds) ");
    //chatmsg.setEditable(false);
    //jButton1.setEnabled(false);
    //jButton3.setEnabled(false);
    //for(int i=30;i>0;i--)
    //{
     //   
     //   quotetxt.append("i\t");
     
     //this.wait(1000);
   // }
    dispose();
}
// disconnect from the server
out.println("CMD_EXIT"); 
//System.out.println(in.nextLine());

s.close(); 



quotetxt.setText("");

         quotetxt.append(quote+"\n");



}
catch (Exception e)
{
}
//Thread refthread=new Refresh();
    //    refthread.start();
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void jButton2MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseMoved
        if(autoR.isSelected()==true)
        {int port = Integer.parseInt(portname.getText());
temp1=hostname.getText();

        System.out.println("This is the output by DexChat Client 1.5\n");
Socket s = DexCCL.getSocket(port); 
try
{
System.out.println("Connected on port " + port);
Scanner in =new Scanner(s.getInputStream());
PrintWriter out = new PrintWriter(s.getOutputStream(),true); 




out.println(username.getText());
out.println(passname);
String app=in.nextLine();
String quote="";
if(app.equalsIgnoreCase("APPROVE"))
        {
            
        
    out.println("REFRESH"); 

while(true)
{
    
    String input=in.nextLine();
    if(input.equalsIgnoreCase("END"))
        break;
    else
        quote = quote+"\n"+input;
} }
// disconnect from the server
out.println("CMD_EXIT"); 
//System.out.println(in.nextLine());

s.close(); 

// write the quote on the chalkboard

quotetxt.setText("");

         quotetxt.append(quote+"\n");



}
catch (Exception e)
{
e.printStackTrace(); 
}}// TODO add your handling code here:
    }//GEN-LAST:event_jButton2MouseMoved

    private void jButton1MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_jButton1MouseWheelMoved
        int port = Integer.parseInt(portname.getText());
temp1=hostname.getText();

        System.out.println("This is the output by DexChat Client 1.5\n");
Socket s = DexCCL.getSocket(port); 
try
{
System.out.println("Connected on port " + port);
Scanner in =new Scanner(s.getInputStream());
PrintWriter out = new PrintWriter(s.getOutputStream(),true); 




out.println(username.getText());
out.println(passname);
String app=in.nextLine();
String quote="";
if(app.equalsIgnoreCase("APPROVE"))
    {
        out.println(chatmsg.getText()); 
        chatmsg.setText("");

//String quote="";
        while(true)
        {
    
            String input=in.nextLine();
            if(input.equalsIgnoreCase("END"))
                break;
            else
                quote = quote+"\n"+input;
        }
    }
// disconnect from the server
out.println("CMD_EXIT"); 
//System.out.println(in.nextLine());

s.close(); 

// write the quote on the chalkboard

quotetxt.setText("");

         quotetxt.append(quote+"\n");



}
catch (Exception e)
{
e.printStackTrace(); 
}
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1MouseWheelMoved

    private void jLabel2MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseMoved
        if(autoR.isSelected()==true)
        {int port = Integer.parseInt(portname.getText());
temp1=hostname.getText();

        System.out.println("This is the output by DexChat Client 1.5\n");
Socket s = DexCCL.getSocket(port); 
try
{
System.out.println("Connected on port " + port);
Scanner in =new Scanner(s.getInputStream());
PrintWriter out = new PrintWriter(s.getOutputStream(),true); 




out.println(username.getText());
out.println(passname);
String app=in.nextLine();
String quote="";
if(app.equalsIgnoreCase("APPROVE"))
        {
            
        
    out.println("REFRESH"); 

while(true)
{
    
    String input=in.nextLine();
    if(input.equalsIgnoreCase("END"))
        break;
    else
        quote = quote+"\n"+input;
} }
// disconnect from the server
out.println("CMD_EXIT"); 
//System.out.println(in.nextLine());

s.close(); 

// write the quote on the chalkboard

quotetxt.setText("");

         quotetxt.append(quote+"\n");



}
catch (Exception e)
{
e.printStackTrace(); 
}}// TODO add your handling code here:
    }//GEN-LAST:event_jLabel2MouseMoved

    private void jLabel2MouseMoved1(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseMoved1
        if(autoR.isSelected()==true)
        {int port = Integer.parseInt(portname.getText());
temp1=hostname.getText();

        System.out.println("This is the output by DexChat Client 1.5\n");
Socket s = DexCCL.getSocket(port); 
try
{
System.out.println("Connected on port " + port);
Scanner in =new Scanner(s.getInputStream());
PrintWriter out = new PrintWriter(s.getOutputStream(),true); 




out.println(username.getText());
out.println(passname);
String app=in.nextLine();
String quote="";
if(app.equalsIgnoreCase("APPROVE"))
        {
            
        
    out.println("REFRESH"); 

while(true)
{
    
    String input=in.nextLine();
    if(input.equalsIgnoreCase("END"))
        break;
    else
        quote = quote+"\n"+input;
} }
// disconnect from the server
out.println("CMD_EXIT"); 
//System.out.println(in.nextLine());

s.close(); 

// write the quote on the chalkboard

quotetxt.setText("");

         quotetxt.append(quote+"\n");



}
catch (Exception e)
{
e.printStackTrace(); 
}}// TODO add your handling code here:
    }//GEN-LAST:event_jLabel2MouseMoved1

    private void jButton1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseMoved
        if(autoR.isSelected()==true)
        {int port = Integer.parseInt(portname.getText());
temp1=hostname.getText();

        System.out.println("This is the output by DexChat Client 1.5\n");
Socket s = DexCCL.getSocket(port); 
try
{
System.out.println("Connected on port " + port);
Scanner in =new Scanner(s.getInputStream());
PrintWriter out = new PrintWriter(s.getOutputStream(),true); 




out.println(username.getText());
out.println(passname);
String app=in.nextLine();
String quote="";
if(app.equalsIgnoreCase("APPROVE"))
        {
            
        
    out.println("REFRESH"); 

while(true)
{
    
    String input=in.nextLine();
    if(input.equalsIgnoreCase("END"))
        break;
    else
        quote = quote+"\n"+input;
} }
// disconnect from the server
out.println("CMD_EXIT"); 
//System.out.println(in.nextLine());

s.close(); 

// write the quote on the chalkboard

quotetxt.setText("");

         quotetxt.append(quote+"\n");



}
catch (Exception e)
{
e.printStackTrace(); 
}}// TODO add your handling code here:
    }//GEN-LAST:event_jButton1MouseMoved

    private void chatmsgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chatmsgActionPerformed
        String temps=chatmsg.getText();
        if(chatmsg.getText().equalsIgnoreCase("GOFS")){
            new Fullscreen().setVisible(true);   
        }
        if(chatmsg.getText().toUpperCase().startsWith("GETFILE ")){
            String a=chatmsg.getText();
            a=a.substring(8);
            String[] b=a.split("@");
            temps="CMD_SENDFILE "+b[0];
            Default.Var.file2=b[1]+b[0];
            Default.Var.file3=b[1];
            Thread getFile=new NetworkPaste();
            getFile.start();
            int port = Integer.parseInt(portname.getText());
temp1=hostname.getText();

        
Socket s = DexCCL.getSocket(port); 
try
{

Scanner in =new Scanner(s.getInputStream());
PrintWriter out = new PrintWriter(s.getOutputStream(),true); 




out.println(username.getText());
out.println(passname);
String app=in.nextLine();
String quote="";
if(app.equalsIgnoreCase("APPROVE"))
    {
        out.println(temps); 
        chatmsg.setText("");
        if(!(chatmsg.getText().equalsIgnoreCase("CMD_ADMIN_EXIT")))
        {
            
        

//String quote="";
        while(true)
        {
    
            String input=in.nextLine();
            if(input.equalsIgnoreCase("END"))
                break;
            else
                quote = quote+"\n"+input;
        }}
    }
else if (app.equalsIgnoreCase("DISAPPROVE"))
{
    
}
// disconnect from the server
out.println("CMD_EXIT"); 
//System.out.println(in.nextLine());

s.close(); 

// write the quote on the chalkboard

quotetxt.setText("");

         quotetxt.append(quote+"\n");



}
catch (Exception e)
{
e.printStackTrace(); 
}
        }
        else
        {
            int port = Integer.parseInt(portname.getText());
temp1=hostname.getText();

        
Socket s = DexCCL.getSocket(port); 
try
{

Scanner in =new Scanner(s.getInputStream());
PrintWriter out = new PrintWriter(s.getOutputStream(),true); 




out.println(username.getText());
out.println(passname);
String app=in.nextLine();
String quote="";
if(app.equalsIgnoreCase("APPROVE"))
    {
        out.println(temps); 
        chatmsg.setText("");
        if(!(chatmsg.getText().equalsIgnoreCase("CMD_ADMIN_EXIT")))
        {
            
        

//String quote="";
        while(true)
        {
    
            String input=in.nextLine();
            if(input.equalsIgnoreCase("END"))
                break;
            else
                quote = quote+"\n"+input;
        }}
    }
else if (app.equalsIgnoreCase("DISAPPROVE"))
{
    
}
// disconnect from the server
out.println("CMD_EXIT"); 
//System.out.println(in.nextLine());

s.close(); 

// write the quote on the chalkboard

quotetxt.setText("");

         quotetxt.append(quote+"\n");



}
catch (Exception e)
{
    e.getMessage();
    System.out.println("SERVER CLOSED CODE: "+e.getMessage());
}
        }      // TODO add your handling code here:
    }//GEN-LAST:event_chatmsgActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
       int port = Integer.parseInt(portname.getText());
temp1=hostname.getText();

        System.out.println("This is the output by DexChat Client 2.0\n");
Socket s = DexCCL.getSocket(port); 
try
{
System.out.println("Connected on port " + port);
Scanner in =new Scanner(s.getInputStream());
PrintWriter out = new PrintWriter(s.getOutputStream(),true); 




out.println(username.getText());
out.println(passname);
String app=in.nextLine();
String quote="";
if(app.equalsIgnoreCase("APPROVE"))
        {
            
        
    out.println("CMD_DISCONNECT"); 

while(true)
{
    
    String input=in.nextLine();
    if(input.equalsIgnoreCase("END"))
        break;
    else
        quote = quote+"\n"+input;
} }
// disconnect from the server
out.println("CMD_EXIT"); 
//System.out.println(in.nextLine());

s.close(); 

// write the quote on the chalkboard

quotetxt.setText("");

         quotetxt.append(quote+"\n");


Launcher.clchk=0;
Launcher.launcher.setVisible(true);
}
catch (Exception e)
{
e.printStackTrace(); 
} // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        new help().setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void quotetxtMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quotetxtMouseMoved
        if(autoR.isSelected()==true)
        {
            int port = Integer.parseInt(portname.getText());
        
        temp1=hostname.getText();

        System.out.println("This is the output by DexChat Client 1.5\n");
        Socket s = DexCCL.getSocket(port);
        try
        {
            System.out.println("Connected on port " + port);
            Scanner in =new Scanner(s.getInputStream());
            PrintWriter out = new PrintWriter(s.getOutputStream(),true);

            out.println(username.getText());
            out.println(passname);
            String app=in.nextLine();
            String quote="";
            if(app.equalsIgnoreCase("APPROVE"))
            {

                out.println("REFRESH");

                while(true)
                {

                    String input=in.nextLine();
                    if(input.equalsIgnoreCase("END"))
                    break;
                    else
                    quote = quote+"\n"+input;
                } }
                // disconnect from the server
                out.println("CMD_EXIT");
                //System.out.println(in.nextLine());

                s.close();

                // write the quote on the chalkboard

                quotetxt.setText("");

                quotetxt.append(quote+"\n");

            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
        }// TODO add your handling code here:
    }//GEN-LAST:event_quotetxtMouseMoved

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
int port = Integer.parseInt(portname.getText());
temp1=hostname.getText();

        
Socket s = DexCCL.getSocket(port); 
try
{

Scanner in =new Scanner(s.getInputStream());
PrintWriter out = new PrintWriter(s.getOutputStream(),true); 




out.println(username.getText());
out.println(passname);
String app=in.nextLine();
String quote="";
if(app.equalsIgnoreCase("APPROVE"))
    {
        out.println("CMD_RESTORE"); 
        
        if(!(chatmsg.getText().equalsIgnoreCase("CMD_ADMIN_EXIT")))
        {
            
        

//String quote="";
        while(true)
        {
    
            String input=in.nextLine();
            if(input.equalsIgnoreCase("END"))
                break;
            else
                quote = quote+"\n"+input;
        }}
    }
else if (app.equalsIgnoreCase("DISAPPROVE"))
{
    
}
// disconnect from the server
out.println("CMD_EXIT"); 
//System.out.println(in.nextLine());

s.close(); 

// write the quote on the chalkboard

quotetxt.setText("");

         quotetxt.append(quote+"\n");



}
catch (Exception e)
{
e.printStackTrace(); 
}         // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem25ActionPerformed
quotetxt.setForeground(Color.black);
quotetxt.setBackground(Color.WHITE);// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem25ActionPerformed

    private void jMenuItem24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem24ActionPerformed
quotetxt.setForeground(Color.green);
quotetxt.setBackground(Color.black);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem24ActionPerformed

    private void jMenuItem27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem27ActionPerformed
quotetxt.setForeground(Color.WHITE);
quotetxt.setBackground(Color.BLACK);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem27ActionPerformed

    private void jMenuItem26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem26ActionPerformed
quotetxt.setForeground(Color.ORANGE);
quotetxt.setBackground(Color.darkGray);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem26ActionPerformed

    private void jMenuItem23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem23ActionPerformed
quotetxt.setForeground(Color.black);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem23ActionPerformed

    private void jMenuItem22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem22ActionPerformed
quotetxt.setForeground(Color.blue);         // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem22ActionPerformed

    private void jMenuItem21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem21ActionPerformed
quotetxt.setForeground(Color.red);         // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem21ActionPerformed

    private void jMenuItem19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem19ActionPerformed
quotetxt.setForeground(Color.green);         // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem19ActionPerformed

    private void jMenuItem28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem28ActionPerformed
quotetxt.setForeground(Color.white);         // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem28ActionPerformed

    private void jMenuItem29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem29ActionPerformed
quotetxt.setBackground(Color.white);         // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem29ActionPerformed

    private void jMenuItem20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem20ActionPerformed
quotetxt.setBackground(Color.green);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem20ActionPerformed

    private void jMenuItem30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem30ActionPerformed
quotetxt.setBackground(Color.red);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem30ActionPerformed

    private void jMenuItem31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem31ActionPerformed
quotetxt.setBackground(Color.blue);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem31ActionPerformed

    private void jMenuItem32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem32ActionPerformed
quotetxt.setBackground(Color.black);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem32ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
int port = Integer.parseInt(portname.getText());
temp1=hostname.getText();

        
Socket s = DexCCL.getSocket(port); 
try
{

Scanner in =new Scanner(s.getInputStream());
PrintWriter out = new PrintWriter(s.getOutputStream(),true); 




out.println(username.getText());
out.println(passname);
String app=in.nextLine();
String quote="";
if(app.equalsIgnoreCase("APPROVE"))
    {
        out.println("CMD_ONLINE"); 
        
        if(!(chatmsg.getText().equalsIgnoreCase("CMD_ADMIN_EXIT")))
        {
            
        

//String quote="";
        while(true)
        {
    
            String input=in.nextLine();
            if(input.equalsIgnoreCase("END"))
                break;
            else
                quote = quote+"\n"+input;
        }}
    }
else if (app.equalsIgnoreCase("DISAPPROVE"))
{
    
}
// disconnect from the server
out.println("CMD_EXIT"); 
//System.out.println(in.nextLine());

s.close(); 

// write the quote on the chalkboard

quotetxt.setText("");

         quotetxt.append(quote+"\n");



}
catch (Exception e)
{
e.printStackTrace(); 
}        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
int port = Integer.parseInt(portname.getText());
temp1=hostname.getText();

        
Socket s = DexCCL.getSocket(port); 
try
{

Scanner in =new Scanner(s.getInputStream());
PrintWriter out = new PrintWriter(s.getOutputStream(),true); 




out.println(username.getText());
out.println(passname);
String app=in.nextLine();
String quote="";
if(app.equalsIgnoreCase("APPROVE"))
    {
        out.println("CMD_GETMSG"); 
        
        if(!(chatmsg.getText().equalsIgnoreCase("CMD_ADMIN_EXIT")))
        {
            
        

//String quote="";
        while(true)
        {
    
            String input=in.nextLine();
            if(input.equalsIgnoreCase("END"))
                break;
            else
                quote = quote+"\n"+input;
        }}
    }
else if (app.equalsIgnoreCase("DISAPPROVE"))
{
    
}
// disconnect from the server
out.println("CMD_EXIT"); 
//System.out.println(in.nextLine());

s.close(); 

// write the quote on the chalkboard

quotetxt.setText("");

         quotetxt.append(quote+"\n");



}
catch (Exception e)
{
e.printStackTrace(); 
}         // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
int port = Integer.parseInt(portname.getText());
temp1=hostname.getText();

        
Socket s = DexCCL.getSocket(port); 
try
{

Scanner in =new Scanner(s.getInputStream());
PrintWriter out = new PrintWriter(s.getOutputStream(),true); 




out.println(username.getText());
out.println(passname);
String app=in.nextLine();
String quote="";
if(app.equalsIgnoreCase("APPROVE"))
    {
        out.println("CMD_GETMSGCUR"); 
        
        if(!(chatmsg.getText().equalsIgnoreCase("CMD_ADMIN_EXIT")))
        {
            
        

//String quote="";
        while(true)
        {
    
            String input=in.nextLine();
            if(input.equalsIgnoreCase("END"))
                break;
            else
                quote = quote+"\n"+input;
        }}
    }
else if (app.equalsIgnoreCase("DISAPPROVE"))
{
    
}
// disconnect from the server
out.println("CMD_EXIT"); 
//System.out.println(in.nextLine());

s.close(); 

// write the quote on the chalkboard

quotetxt.setText("");

         quotetxt.append(quote+"\n");



}
catch (Exception e)
{
e.printStackTrace(); 
}         // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
int port = Integer.parseInt(portname.getText());
temp1=hostname.getText();

        
Socket s = DexCCL.getSocket(port); 
try
{

Scanner in =new Scanner(s.getInputStream());
PrintWriter out = new PrintWriter(s.getOutputStream(),true); 




out.println(username.getText());
out.println(passname);
String app=in.nextLine();
String quote="";
if(app.equalsIgnoreCase("APPROVE"))
    {
        out.println("CMD_GETTIME"); 
        
        if(!(chatmsg.getText().equalsIgnoreCase("CMD_ADMIN_EXIT")))
        {
            
        

//String quote="";
        while(true)
        {
    
            String input=in.nextLine();
            if(input.equalsIgnoreCase("END"))
                break;
            else
                quote = quote+"\n"+input;
        }}
    }
else if (app.equalsIgnoreCase("DISAPPROVE"))
{
    
}
// disconnect from the server
out.println("CMD_EXIT"); 
//System.out.println(in.nextLine());

s.close(); 

// write the quote on the chalkboard

quotetxt.setText("");

         quotetxt.append(quote+"\n");



}
catch (Exception e)
{
e.printStackTrace(); 
}         // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
int port = Integer.parseInt(portname.getText());
temp1=hostname.getText();

        
Socket s = DexCCL.getSocket(port); 
try
{

Scanner in =new Scanner(s.getInputStream());
PrintWriter out = new PrintWriter(s.getOutputStream(),true); 




out.println(username.getText());
out.println(passname);
String app=in.nextLine();
String quote="";
if(app.equalsIgnoreCase("APPROVE"))
    {
        out.println("CMD_UPTIME"); 
        
        if(!(chatmsg.getText().equalsIgnoreCase("CMD_ADMIN_EXIT")))
        {
            
        

//String quote="";
        while(true)
        {
    
            String input=in.nextLine();
            if(input.equalsIgnoreCase("END"))
                break;
            else
                quote = quote+"\n"+input;
        }}
    }
else if (app.equalsIgnoreCase("DISAPPROVE"))
{
    
}
// disconnect from the server
out.println("CMD_EXIT"); 
//System.out.println(in.nextLine());

s.close(); 

// write the quote on the chalkboard

quotetxt.setText("");

         quotetxt.append(quote+"\n");



}
catch (Exception e)
{
e.printStackTrace(); 
}         // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
int port = Integer.parseInt(portname.getText());
temp1=hostname.getText();

        
Socket s = DexCCL.getSocket(port); 
try
{

Scanner in =new Scanner(s.getInputStream());
PrintWriter out = new PrintWriter(s.getOutputStream(),true); 




out.println(username.getText());
out.println(passname);
String app=in.nextLine();
String quote="";
if(app.equalsIgnoreCase("APPROVE"))
    {
        out.println("CMD_BACKUP"); 
        
        if(!(chatmsg.getText().equalsIgnoreCase("CMD_ADMIN_EXIT")))
        {
            
        

//String quote="";
        while(true)
        {
    
            String input=in.nextLine();
            if(input.equalsIgnoreCase("END"))
                break;
            else
                quote = quote+"\n"+input;
        }}
    }
else if (app.equalsIgnoreCase("DISAPPROVE"))
{
    
}
// disconnect from the server
out.println("CMD_EXIT"); 
//System.out.println(in.nextLine());

s.close(); 

// write the quote on the chalkboard

quotetxt.setText("");

         quotetxt.append(quote+"\n");



}
catch (Exception e)
{
e.printStackTrace(); 
}         // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void SmileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SmileActionPerformed
chatmsg.setText(chatmsg.getText()+" <s>");        // TODO add your handling code here:
    }//GEN-LAST:event_SmileActionPerformed

    private void SkullActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SkullActionPerformed
chatmsg.setText(chatmsg.getText()+" <b>");      // TODO add your handling code here:
    }//GEN-LAST:event_SkullActionPerformed

    private void VictoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VictoryActionPerformed
chatmsg.setText(chatmsg.getText()+" <v>");        // TODO add your handling code here:
    }//GEN-LAST:event_VictoryActionPerformed

    private void HeartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HeartActionPerformed
chatmsg.setText(chatmsg.getText()+" <h>");        // TODO add your handling code here:
    }//GEN-LAST:event_HeartActionPerformed

    private void Heart1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Heart1ActionPerformed
       Heart.doClick();
       // TODO add your handling code here:
    }//GEN-LAST:event_Heart1ActionPerformed

    private void Victory1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Victory1ActionPerformed
        Victory.doClick();// TODO add your handling code here:
    }//GEN-LAST:event_Victory1ActionPerformed

    private void Skull1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Skull1ActionPerformed
        Skull.doClick();// TODO add your handling code here:
    }//GEN-LAST:event_Skull1ActionPerformed

    private void Smile1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Smile1ActionPerformed
        Smile.doClick();// TODO add your handling code here:
    }//GEN-LAST:event_Smile1ActionPerformed

    private void onlineListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onlineListActionPerformed
int port = Integer.parseInt(portname.getText());
temp1=hostname.getText();

        
Socket s = DexCCL.getSocket(port); 
try
{

Scanner in =new Scanner(s.getInputStream());
PrintWriter out = new PrintWriter(s.getOutputStream(),true); 




out.println(username.getText());
out.println(passname);
String app=in.nextLine();
String quote="";
if(app.equalsIgnoreCase("APPROVE"))
    {
        out.println("CMD_ADMIN_MSG"); 
        
        if(!(chatmsg.getText().equalsIgnoreCase("CMD_ADMIN_EXIT")))
        {
            
        

//String quote="";
        while(true)
        {
    
            String input=in.nextLine();
            if(input.equalsIgnoreCase("END"))
                break;
            else
                quote = quote+"\n"+input;
        }}
    }
else if (app.equalsIgnoreCase("DISAPPROVE"))
{
    
}
// disconnect from the server
out.println("CMD_EXIT"); 
//System.out.println(in.nextLine());

s.close(); 

// write the quote on the chalkboard

quotetxt.setText("");

         quotetxt.append(quote+"\n");



}
catch (Exception e)
{
e.printStackTrace(); 
}        // TODO add your handling code here:
    }//GEN-LAST:event_onlineListActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
temp2=1;
new help().setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
new help().setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        System.exit(1);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        this.dispose();
        int port = Integer.parseInt(portname.getText());
        temp1=hostname.getText();

        System.out.println("This is the output by DexChat Client 1.5\n");
        Socket s = DexCCL.getSocket(port);
        try
        {
            System.out.println("Connected on port " + port);
            Scanner in =new Scanner(s.getInputStream());
            PrintWriter out = new PrintWriter(s.getOutputStream(),true);

            out.println(username.getText());
            out.println(passname);
            String app=in.nextLine();
            String quote="";
            if(app.equalsIgnoreCase("APPROVE"))
            {

                out.println("CMD_DISCONNECT");

                while(true)
                {

                    String input=in.nextLine();
                    if(input.equalsIgnoreCase("END")) {
                        break;
                    }
                    else {
                        quote = quote+"\n"+input;
                    }
                } }
                // disconnect from the server
                out.println("CMD_EXIT");
                //System.out.println(in.nextLine());

                s.close();

                // write the quote on the chalkboard

                quotetxt.setText("");

                quotetxt.append(quote+"\n");

                Launcher.clchk=0;
                Launcher.launcher.setVisible(true);
            }
            catch (Exception e)
            {
            }// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void autoRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoRefreshActionPerformed
int port = Integer.parseInt(portname.getText());
temp1=hostname.getText();

        System.out.println("This is the output by DexChat Client 1.5\n");
Socket s = DexCCL.getSocket(port); 
try
{
System.out.println("Connected on port " + port);
Scanner in =new Scanner(s.getInputStream());
PrintWriter out = new PrintWriter(s.getOutputStream(),true); 




out.println(username.getText());
out.println(passname);
String app=in.nextLine();
String quote="";
if(app.equalsIgnoreCase("APPROVE"))
        {
            
        
    out.println("REFRESH"); 

while(true)
{
    
    String input=in.nextLine();
    if(input.equalsIgnoreCase("END"))
        break;
    else
        quote = quote+"\n"+input;
} }
// disconnect from the server
out.println("CMD_EXIT"); 
//System.out.println(in.nextLine());

s.close(); 

// write the quote on the chalkboard

quotetxt.setText("");

         quotetxt.append(quote+"\n");



}
catch (Exception e)
{
e.printStackTrace(); 
}        // TODO add your handling code here:
    }//GEN-LAST:event_autoRefreshActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Client().setVisible(true);
                
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Heart;
    private javax.swing.JMenuItem Heart1;
    private javax.swing.JMenuItem Skull;
    private javax.swing.JMenuItem Skull1;
    private javax.swing.JMenuItem Smile;
    private javax.swing.JMenuItem Smile1;
    private javax.swing.JMenuItem Victory;
    private javax.swing.JMenuItem Victory1;
    private javax.swing.JTextField area;
    private javax.swing.JCheckBox autoR;
    public static javax.swing.JButton autoRefresh;
    private javax.swing.JPopupMenu chatboxpopup;
    public static javax.swing.JTextField chatmsg;
    public static javax.swing.JTextField hostname;
    public static javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem23;
    private javax.swing.JMenuItem jMenuItem24;
    private javax.swing.JMenuItem jMenuItem25;
    private javax.swing.JMenuItem jMenuItem26;
    private javax.swing.JMenuItem jMenuItem27;
    private javax.swing.JMenuItem jMenuItem28;
    private javax.swing.JMenuItem jMenuItem29;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem30;
    private javax.swing.JMenuItem jMenuItem31;
    private javax.swing.JMenuItem jMenuItem32;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuItem onlineList;
    public static javax.swing.JTextField portname;
    public static javax.swing.JTextArea quotetxt;
    private javax.swing.JPopupMenu smileyPopup;
    public static javax.swing.JTextField username;
    private javax.swing.JTextField usid;
    // End of variables declaration//GEN-END:variables
}
